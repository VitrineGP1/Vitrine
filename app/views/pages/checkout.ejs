<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Finalizar Compra - Vitrine</title>
    <link rel="stylesheet" href="css/home.css">
    <link rel="stylesheet" href="css/reset.css">
    <link rel="stylesheet" href="css/header.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simply-notify@1.0.4/dist/simply-notify.min.css">
    <style>
        body { padding-top: 120px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .checkout-header { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; text-align: center; }
        .checkout-content { display: grid; grid-template-columns: 2fr 1fr; gap: 30px; }
        .checkout-form { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
        .order-summary { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); height: fit-content; }
        .form-section { margin-bottom: 30px; }
        .form-section h3 { margin-bottom: 20px; color: #333; border-bottom: 2px solid #f0f0f0; padding-bottom: 10px; }
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-group input, .form-group select { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 5px; }
        .form-row { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }
        .form-row-3 { display: grid; grid-template-columns: 2fr 1fr 1fr; gap: 15px; }

        .order-item { display: flex; align-items: center; gap: 15px; padding: 15px 0; border-bottom: 1px solid #f0f0f0; }
        .item-image { width: 60px; height: 60px; border-radius: 8px; object-fit: cover; }
        .item-info { flex: 1; }
        .item-name { font-weight: bold; margin-bottom: 5px; }
        .item-details { color: #666; font-size: 0.9rem; }
        .summary-row { display: flex; justify-content: space-between; margin-bottom: 10px; }
        .summary-total { font-weight: bold; font-size: 1.2rem; border-top: 2px solid #f0f0f0; padding-top: 15px; margin-top: 15px; }
        .btn { padding: 15px 30px; background: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 1.1rem; width: 100%; }
        .btn:hover { background: #218838; }
        .btn:disabled { background: #ccc; cursor: not-allowed; }
        .address-options { margin-bottom: 20px; }
        .address-option { border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin-bottom: 10px; cursor: pointer; }
        .address-option:hover { border-color: #713112; }
        .address-option.selected { border-color: #713112; background: #f8f9fa; }
        .new-address { display: none; }
        .new-address.show { display: block; }
        @media (max-width: 768px) {
            .checkout-content { grid-template-columns: 1fr; }
            .form-row, .form-row-3 { grid-template-columns: 1fr; }

        }
    </style>
</head>
<body>
    <header class="header">
        <a class="logo" href="/"><img src="imagens/logo(2).png" width="75px" height="75px" alt="Logo da Vitrine"></a>
        <nav>
            <ul class="nav-list">
                <li><a href="/">Início</a></li>
                <li><a href="/carrinho">Carrinho</a></li>
                <li><a href="/perfil">Perfil</a></li>
                <li><a href="#" onclick="logout()">Sair</a></li>
            </ul>
        </nav>
    </header>

    <main class="container">
        <header class="checkout-header">
            <h1><i class="fas fa-credit-card"></i> Finalizar Compra</h1>
            <p>Revise seus dados e finalize seu pedido</p>
        </header>

        <section class="checkout-content">
            <main class="checkout-form">
                <form id="checkout-form">
                    <section class="form-section">
                        <h3><i class="fas fa-map-marker-alt"></i> Endereço de Entrega</h3>
                        
                        <section class="address-options" id="address-options">
                            <!-- Endereço será carregado aqui -->
                            <article class="address-option" data-address="edit">
                                <h4><i class="fas fa-edit"></i> Editar endereço</h4>
                                <p>Atualizar seu endereço de entrega</p>
                            </article>
                        </section>

                        <section class="new-address" id="new-address">
                            <section class="form-row">
                                <section class="form-group">
                                    <label for="cep">CEP</label>
                                    <input type="text" id="cep" name="cep" maxlength="9" placeholder="00000-000">
                                </section>
                                <section class="form-group">
                                    <label for="numero">Número</label>
                                    <input type="text" id="numero" name="numero">
                                </section>
                            </section>
                            <section class="form-group">
                                <label for="logradouro">Logradouro</label>
                                <input type="text" id="logradouro" name="logradouro" readonly>
                            </section>
                            <section class="form-row">
                                <section class="form-group">
                                    <label for="bairro">Bairro</label>
                                    <input type="text" id="bairro" name="bairro" readonly>
                                </section>
                                <section class="form-group">
                                    <label for="cidade">Cidade</label>
                                    <input type="text" id="cidade" name="cidade" readonly>
                                </section>
                            </section>
                            <section class="form-group">
                                <label for="uf">UF</label>
                                <input type="text" id="uf" name="uf" readonly maxlength="2">
                            </section>
                            <button type="button" id="save-address-btn" class="btn" style="margin-top: 15px;">Atualizar Endereço</button>
                        </section>
                    </section>



                    <button type="submit" class="btn" id="place-order-btn">
                        <i class="fas fa-check"></i> Finalizar Pedido
                    </button>
                </form>
            </main>

            <aside class="order-summary">
                <h3>Resumo do Pedido</h3>
                
                <section id="order-items">
                    <!-- Itens serão carregados aqui -->
                </section>

                <section class="summary-details">
                    <section class="summary-row">
                        <span>Subtotal:</span>
                        <span id="subtotal">R$ 0,00</span>
                    </section>
                    <section class="summary-row">
                        <span>Frete:</span>
                        <span id="shipping">Grátis</span>
                    </section>
                    <section class="summary-row">
                        <span>Desconto:</span>
                        <span id="discount">R$ 0,00</span>
                    </section>
                    <section class="summary-row summary-total">
                        <span>Total:</span>
                        <span id="total">R$ 0,00</span>
                    </section>
                </section>

                <section style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #f0f0f0;">
                    <h4><i class="fas fa-shield-alt"></i> Compra Segura</h4>
                    <p style="color: #666; font-size: 0.9rem; margin-top: 10px;">
                        Seus dados estão protegidos com criptografia SSL
                    </p>
                </section>
            </aside>
        </section>
    </main>

    <script src="https://sdk.mercadopago.com/js/v2"></script>
    <script>
        const mp = new MercadoPago('APP_USR-adf57951-d1a6-40b1-9808-d922808b443e', {
            locale: 'pt-BR'
        });
        
        document.addEventListener('DOMContentLoaded', function() {
            loadOrderSummary();
            loadUserAddresses();
            setupEventListeners();
        });

        function loadOrderSummary() {
            const carrinho = JSON.parse(localStorage.getItem('cart') || '[]');
            const orderItems = document.getElementById('order-items');
            
            if (carrinho.length === 0) {
                window.location.href = '/carrinho';
                return;
            }

            orderItems.innerHTML = carrinho.map(item => `
                <article class="order-item">
                    <img src="${item.image || 'https://placehold.co/60x60/cccccc/333333?text=Produto'}" 
                         alt="${item.name}" class="item-image">
                    <section class="item-info">
                        <p class="item-name">${item.name}</p>
                        <p class="item-details">Qtd: ${item.quantity} × R$ ${item.price.toFixed(2).replace('.', ',')}</p>
                        ${item.size ? `<p class="item-size" style="color: #713112; font-weight: bold; margin-top: 5px;">Tamanho: ${item.size}</p>` : ''}
                    </section>
                </article>
            `).join('');

            const subtotal = carrinho.reduce((total, item) => total + (item.price * item.quantity), 0);
            document.getElementById('subtotal').textContent = `R$ ${subtotal.toFixed(2).replace('.', ',')}`;
            document.getElementById('total').textContent = `R$ ${subtotal.toFixed(2).replace('.', ',')}`;
        }

        async function loadUserAddresses() {
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            if (!loggedUser) return;
            
            try {
                const response = await fetch(`/api/addresses/${loggedUser.id}`);
                const addresses = await response.json();
                
                const addressOptions = document.getElementById('address-options');
                const newAddressOption = addressOptions.querySelector('[data-address="edit"]').cloneNode(true);
                
                // Limpar endereços existentes
                addressOptions.innerHTML = '';
                
                // Verificar se addresses é um array
                if (Array.isArray(addresses) && addresses.length > 0) {
                    const address = addresses[0];
                    const addressDiv = document.createElement('article');
                    addressDiv.className = 'address-option selected';
                    addressDiv.dataset.addressId = address.ID_ENDERECO;
                    addressDiv.innerHTML = `
                        <h4>Endereço Principal</h4>
                        <p>${address.LOGRADOURO}, ${address.NUMERO || 'S/N'} - ${address.BAIRRO}<br>
                        ${address.CIDADE}, ${address.UF} - ${address.CEP}</p>
                    `;
                    addressOptions.appendChild(addressDiv);
                }
                
                // Adicionar opção de editar endereço
                addressOptions.appendChild(newAddressOption);
                
                setupAddressListeners();
            } catch (error) {
                console.error('Erro ao carregar endereços:', error);
                // Manter apenas a opção de novo endereço
                const addressOptions = document.getElementById('address-options');
                const newAddressOption = addressOptions.querySelector('[data-address="new"]');
                if (newAddressOption) {
                    addressOptions.innerHTML = '';
                    addressOptions.appendChild(newAddressOption);
                    setupAddressListeners();
                }
            }
        }
        
        function setupEventListeners() {
            // CEP lookup
            document.getElementById('cep').addEventListener('blur', async function() {
                const cep = this.value.replace(/\D/g, '');
                if (cep.length === 8) {
                    try {
                        const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
                        const data = await response.json();
                        
                        if (!data.erro) {
                            document.getElementById('logradouro').value = data.logradouro;
                            document.getElementById('bairro').value = data.bairro;
                            document.getElementById('cidade').value = data.localidade;
                            document.getElementById('uf').value = data.uf;
                        } else {
                            showError('CEP não encontrado');
                        }
                    } catch (error) {
                        showError('Erro ao buscar CEP');
                    }
                }
            });
            
            // Formatar CEP
            document.getElementById('cep').addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');
                if (value.length > 5) {
                    value = value.substring(0, 5) + '-' + value.substring(5, 8);
                }
                e.target.value = value;
            });
            
            // Salvar endereço
            document.getElementById('save-address-btn').addEventListener('click', saveAddress);
            
            setupAddressListeners();



            // Submit do formulário
            document.getElementById('checkout-form').addEventListener('submit', function(e) {
                e.preventDefault();
                processOrder();
            });
        }
        
        function setupAddressListeners() {
            document.querySelectorAll('.address-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.address-option').forEach(o => o.classList.remove('selected'));
                    this.classList.add('selected');
                    
                    const newAddressForm = document.getElementById('new-address');
                    if (this.dataset.address === 'edit') {
                        newAddressForm.classList.add('show');
                    } else {
                        newAddressForm.classList.remove('show');
                    }
                });
            });
        }
        
        async function saveAddress() {
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            if (!loggedUser) {
                showError('Usuário não logado');
                return;
            }
            
            const addressData = {
                userId: loggedUser.id,
                cep: document.getElementById('cep').value.replace(/\D/g, ''),
                logradouro: document.getElementById('logradouro').value,
                numero: document.getElementById('numero').value,
                bairro: document.getElementById('bairro').value,
                cidade: document.getElementById('cidade').value,
                uf: document.getElementById('uf').value
            };
            
            if (!addressData.cep || !addressData.numero || !addressData.logradouro) {
                showError('Preencha todos os campos obrigatórios');
                return;
            }
            
            try {
                const response = await fetch('/api/addresses', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(addressData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showSuccess('Endereço atualizado com sucesso!');
                    document.getElementById('new-address').classList.remove('show');
                    // Limpar formulário
                    document.getElementById('cep').value = '';
                    document.getElementById('numero').value = '';
                    document.getElementById('logradouro').value = '';
                    document.getElementById('bairro').value = '';
                    document.getElementById('cidade').value = '';
                    document.getElementById('uf').value = '';
                    // Recarregar endereço
                    loadUserAddresses();
                } else {
                    showError('Erro ao atualizar endereço');
                }
            } catch (error) {
                console.error('Erro:', error);
                showError('Erro ao atualizar endereço');
            }
        }

        async function processOrder() {
            const btn = document.getElementById('place-order-btn');
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processando...';

            try {
                const cart = JSON.parse(localStorage.getItem('cart') || '[]');
                
                const items = cart.map(item => ({
                    title: item.name,
                    unit_price: parseFloat(item.price),
                    quantity: parseInt(item.quantity),
                    currency_id: 'BRL'
                }));
                
                const response = await fetch('/create-preference', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ items })
                });
                
                const preference = await response.json();
                
                if (preference.id) {
                    // Redirecionar para o Mercado Pago
                    window.location.href = `https://www.mercadopago.com.br/checkout/v1/redirect?pref_id=${preference.id}`;
                } else {
                    throw new Error('Erro ao criar preferência de pagamento');
                }
                
            } catch (error) {
                console.error('Erro:', error);
                showError('Erro ao processar pedido. Tente novamente.');
            } finally {
                btn.disabled = false;
                btn.innerHTML = '<i class="fas fa-check"></i> Finalizar Pedido';
            }
        }

        function logout() {
            localStorage.removeItem('loggedUser');
            window.location.href = '/login';
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/simply-notify@1.0.4/dist/simply-notify.min.js"></script>
    <script src="js/notify-config.js"></script>
</body>
</html>