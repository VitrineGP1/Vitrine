<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu Perfil | Vitrine</title>
    <link rel="stylesheet" href="css/home.css">
    <link rel="stylesheet" href="css/reset.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            font-family: 'Proxima Nova', Arial, sans-serif;
            background-color: #ebebeb;
            color: #333;
            margin: 0;
            padding-top: 120px;
        }
        .logo img {
    border-radius: 50%;
    transition: transform 0.3s ease;
}
.logo img {
    display: block;
}

img {
    max-width: 100%;
    height: auto;
    display: block;
}
        
        .nav-list {
            display: flex;
            list-style: none;
            gap: 1rem;
            align-items: center;
            margin-right: 20px;
        }
        
        .nav-list a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
            padding: 8px 16px;
            border-radius: 20px;
        }
        
        .nav-list a:hover {
            background: rgba(255,255,255,0.2);
            color: #E0FBFC;
        }
        
        .profile-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 4px !important;
            border-radius: 50% !important;
            transition: all 0.3s ease;
        }
        
        .profile-icon:hover {
            background: rgba(255,255,255,0.2) !important;
            transform: scale(1.1);
        }
        
        .profile-icon img {
            border: 2px solid rgba(255,255,255,0.3);
            transition: border-color 0.3s ease;
        }
        
        .profile-icon:hover img {
            border-color: rgba(255,255,255,0.8);
        }
        
        .header {
            background: #3D5A80 !important;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            z-index: 1000;
        }
        
        .carrinho:hover {
            background: rgba(255,255,255,0.2) !important;
            border-radius: 20px;
            transform: scale(1.05);
            transition: all 0.3s ease;
        }
        
        .profile-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            gap: 20px;
        }
        
        .profile-sidebar {
            width: 280px;
            background: white;
            border-radius: 6px;
            padding: 24px;
            height: fit-content;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .profile-header {
            text-align: center;
            margin-bottom: 24px;
            padding-bottom: 24px;
            border-bottom: 1px solid #eee;
        }
        
        .profile-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            margin: 0 auto 16px;
            position: relative;
            overflow: hidden;
            cursor: pointer;
        }
        
        .profile-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: filter 0.3s ease;
        }
        
        .profile-avatar:hover img {
            filter: brightness(0.7);
        }
        
        .photo-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            border-radius: 50%;
        }
        
        .profile-avatar:hover .photo-overlay {
            opacity: 1;
        }
        
        .photo-overlay span {
            color: white;
            font-size: 12px;
            font-weight: 600;
            text-align: center;
        }
        
        .profile-name {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 4px;
        }
        
        .profile-level {
            font-size: 14px;
            color: #666;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        
        .level-badge {
            background: #3483fa;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .profile-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .profile-menu li {
            margin-bottom: 4px;
        }
        
        .profile-menu a {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            color: #666;
            text-decoration: none;
            border-radius: 6px;
            transition: all 0.2s;
            font-size: 14px;
        }
        
        .profile-menu a span {
            margin-left: 10px !important;
        }
        
        .profile-menu a:hover,
        .profile-menu a.active {
            background: #f5f5f5;
            color: #3483fa;
        }
        
        .profile-menu i {
            width: 20px;
            margin-right: 17px !important;
            font-size: 16px;
        }
        
        .profile-menu .fas,
        .profile-menu .fa {
            margin-right: 17px !important;
        }
        
        .profile-main {
            flex: 1;
            background: white;
            border-radius: 6px;
            padding: 32px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .profile-main h1 {
            font-size: 28px;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }
        
        .profile-subtitle {
            color: #666;
            font-size: 16px;
            margin-bottom: 32px;
        }
        
        .form-section {
            margin-bottom: 40px;
        }
        
        .form-section h2 {
            font-size: 20px;
            font-weight: 600;
            color: #333;
            margin-bottom: 20px;
            padding-bottom: 12px;
            border-bottom: 1px solid #eee;
        }
        
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }
        
        .form-field {
            display: flex;
            flex-direction: column;
        }
        
        .form-field label {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }
        
        .form-field input,
        .form-field select {
            padding: 12px 16px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s;
        }
        
        .form-field input:focus,
        .form-field select:focus {
            outline: none;
            border-color: #3483fa;
            box-shadow: 0 0 0 2px rgba(52, 131, 250, 0.1);
        }
        
        .form-field input:read-only {
            background-color: #f8f9fa;
            color: #666;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn-primary {
            background: #3483fa;
            color: white;
        }
        
        .btn-primary:hover {
            background: #2968c8;
        }
        
        .btn-secondary {
            background: #f5f5f5;
            color: #666;
        }
        
        .btn-secondary:hover {
            background: #e9ecef;
        }
        
        .btn-success {
            background: #00a650;
            color: white;
        }
        
        .btn-success:hover {
            background: #00843d;
        }
        
        .btn-group {
            display: flex;
            gap: 12px;
            margin-top: 24px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }
        
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 6px;
            text-align: center;
        }
        
        .stat-number {
            font-size: 24px;
            font-weight: 600;
            color: #3483fa;
            margin-bottom: 4px;
        }
        
        .stat-label {
            font-size: 14px;
            color: #666;
        }
        
        /* Estilos da √Årea do Vendedor */
        .seller-metrics {
            margin-bottom: 30px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .metric-number {
            font-size: 2rem;
            font-weight: bold;
            color: #3483fa;
            margin-bottom: 8px;
        }
        
        .confirmation-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }
        
        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 8px;
            max-width: 400px;
            width: 90%;
            text-align: center;
        }
        
        .modal-content h3 {
            margin: 0 0 15px 0;
            color: #333;
        }
        
        .modal-content p {
            margin: 0 0 25px 0;
            color: #666;
        }
        
        .modal-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
        }
        
        .withdraw-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }
        
        .withdraw-modal-content {
            background: white;
            padding: 30px;
            border-radius: 8px;
            max-width: 500px;
            width: 90%;
        }
        
        .payment-option {
            display: flex;
            align-items: center;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 6px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .payment-option:hover {
            border-color: #3483fa;
        }
        
        .payment-option.selected {
            border-color: #3483fa;
            background: #f8f9ff;
        }
        
        .payment-option input[type="radio"] {
            margin-right: 15px;
        }
        
        .payment-details {
            flex: 1;
        }
        
        .payment-title {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .payment-info {
            font-size: 14px;
            color: #666;
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: #666;
        }
        
        .sales-chart-section {
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .chart-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .chart-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .chart-btn.active,
        .chart-btn:hover {
            background: #3483fa;
            color: white;
            border-color: #3483fa;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
        }
        
        .seller-products-section {
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }
        
        .product-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.3s;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .product-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }
        
        .product-info {
            padding: 15px;
        }
        
        .product-name {
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }
        
        .product-price {
            color: #27AE60;
            font-size: 1.2rem;
            font-weight: bold;
        }
        
        @media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
                padding: 16px;
            }
            
            .profile-sidebar {
                width: 100%;
            }
            
            .profile-main {
                padding: 24px;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <a class="logo" href="/">
            <img src="imagens/logo(2).png" width="75px" height="75px" alt="Logo da Vitrine">
        </a>

        <nav>
            <ul class="nav-list">
                <li><a href="/">In√≠cio</a></li>
                <li><a href="/sobrenos">Sobre</a></li>
                <li>
                    <a href="/carrinho" class="carrinho" aria-label="Carrinho de compras">
                        <i class="fa fa-shopping-cart"></i>
                    </a>
                </li>
                <li><a href="/cadastro" id="become-seller-link">Seja um Vendedor</a></li>
                <li>
                    <a href="/perfil" class="profile-icon" title="Meu Perfil">
                        <img id="header-profile-image" src="https://placehold.co/32x32/cccccc/333333?text=U" alt="Foto de perfil" style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover;">
                    </a>
                </li>
            </ul>
            <button class="mobile-menu-btn" id="mobileMenuBtn" aria-label="Menu de navega√ß√£o">‚ò∞</button>
        </nav>

        <ul class="mobile-menu" id="mobileMenu" style="display: none;">
            <li><a href="/">In√≠cio</a></li>
            <li><a href="/sobrenos">Sobre</a></li>
            <li><a href="/carrinho">Carrinho</a></li>
            <li><a href="/cadastro">Seja um Vendedor</a></li>
            <li><a href="/perfil">Perfil</a></li>
        </ul>
    </header>


    <div class="profile-container">
        <!-- Sidebar -->
        <aside class="profile-sidebar">
            <div class="profile-header">
                <div class="profile-avatar" onclick="document.getElementById('profile-image-input').click()">
                    <img id="user-profile-image" src="https://placehold.co/80x80/cccccc/333333?text=Foto" alt="Foto de Perfil">
                    <div class="photo-overlay">
                        <span>Trocar foto</span>
                    </div>
                    <input type="file" id="profile-image-input" accept="image/*" style="display: none;">
                </div>
                <div class="profile-name" id="profile-display-name">Usu√°rio</div>
                <div class="profile-level">
                    <span class="level-badge">N√≠vel 1</span>
                    <span>Mercado Pontos</span>
                </div>
            </div>
            
            <ul class="profile-menu">
                <li><a href="#" class="active" data-section="dashboard"><i class="fas fa-tachometer-alt"></i><span>Dashboard</span></a></li>
                <li><a href="#" data-section="personal"><i class="fas fa-user"></i><span>Dados pessoais</span></a></li>
                <li><a href="#" data-section="security"><i class="fas fa-shield-alt"></i><span>Seguran√ßa</span></a></li>
                <li><a href="#" data-section="addresses"><i class="fas fa-map-marker-alt"></i><span>Endere√ßos</span></a></li>
                <li><a href="#" data-section="cards"><i class="fas fa-credit-card"></i><span>Cart√µes</span></a></li>
                <li><a href="#" data-section="privacy"><i class="fas fa-eye"></i><span>Privacidade</span></a></li>
                <li><a href="#" data-section="communications"><i class="fas fa-bell"></i><span>Comunica√ß√µes</span></a></li>

                <li><a href="#" id="seller-menu-item" data-section="seller" style="display: none;"><i class="fas fa-store"></i><span>√Årea do Vendedor</span></a></li>
                <li><a href="#" onclick="logout()" style="color: #dc3545; border-top: 1px solid #eee; margin-top: 10px; padding-top: 10px;"><i class="fas fa-sign-out-alt"></i><span>Sair da Conta</span></a></li>
            </ul>
        </aside>
        
        <!-- Main Content -->
        <main class="profile-main">
            <!-- Dashboard -->
            <div id="dashboard-section" class="content-section">
                <h1>Dashboard</h1>
                <p class="profile-subtitle">Vis√£o geral da sua conta</p>
                

                
                <!-- Gr√°fico de Vendas -->
                <section class="sales-chart-section" id="dashboard-chart" style="display: none;">
                    <h2>Gr√°fico de Vendas</h2>
                    <div class="chart-controls">
                        <button class="chart-btn active" data-period="7">√öltimos 7 dias</button>
                        <button class="chart-btn" data-period="30">√öltimos 30 dias</button>
                        <button class="chart-btn" data-period="365">√öltimos 365 dias</button>
                    </div>
                    <div class="chart-container">
                        <canvas id="dashboardSalesChart" width="400" height="200"></canvas>
                    </div>
                    
                    <!-- Status Grid -->
                    <div class="metrics-grid" id="dashboard-status-grid" style="margin-top: 30px;">
                        <div class="metric-card">
                            <div class="metric-number" id="dashboard-chart-total-sales">127</div>
                            <div class="metric-label">Total de Vendas</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-number" id="dashboard-chart-revenue">R$ 2.975,00</div>
                            <div class="metric-label">Faturamento</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-number" id="dashboard-products-count">0</div>
                            <div class="metric-label">Produtos Ativos</div>
                        </div>
                    </div>
                </section>
                
                <div class="form-section">
                    <h2>Atividade recente</h2>
                    <div style="padding: 40px; text-align: center; color: #666; background: #f8f9fa; border-radius: 6px;">
                        <i class="fas fa-inbox" style="font-size: 48px; margin-bottom: 16px; color: #ddd;"></i>
                        <p>Nenhuma atividade recente</p>
                        <p style="font-size: 14px;">Suas compras e vendas aparecer√£o aqui</p>
                    </div>
                </div>
                
                <div class="form-section">
                    <h2>A√ß√µes r√°pidas</h2>
                    <div class="btn-group">
                        <a href="/" class="btn btn-primary">Explorar produtos</a>
                        <a href="/carrinho" class="btn btn-secondary">Ver carrinho</a>
                        <button class="btn btn-success" id="quick-seller-btn" style="display: none;" onclick="showSellerSection()">Gerenciar loja</button>
                    </div>
                </div>
            </div>
            
            <!-- Dados Pessoais -->
            <div id="personal-section" class="content-section" style="display: none;">
                <h1>Dados pessoais</h1>
                <p class="profile-subtitle">Gerencie suas informa√ß√µes pessoais e de contato</p>
                
                <form id="profile-details-form">
                    <div class="form-section">
                        <h2>Informa√ß√µes b√°sicas</h2>
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="profile-name-input">Nome completo</label>
                                <input type="text" id="profile-name-input" name="NOME_USUARIO" readonly>
                            </div>
                            <div class="form-field">
                                <label for="profile-email-input">E-mail</label>
                                <input type="email" id="profile-email-input" name="EMAIL_USUARIO" readonly>
                            </div>
                            <div class="form-field">
                                <label for="profile-celular-input">Telefone</label>
                                <input type="tel" id="profile-celular-input" name="CELULAR_USUARIO" readonly>
                            </div>
                            <div class="form-field">
                                <label for="profile-dataNasc-input">Data de nascimento</label>
                                <input type="date" id="profile-dataNasc-input" name="DT_NASC_USUARIO" readonly>
                            </div>
                            <div class="form-field">
                                <label for="profile-type-display">Tipo de usu√°rio</label>
                                <input type="text" id="profile-type-display" readonly>
                            </div>
                        </div>
                    </div>
                    
                    <div class="btn-group">
                        <button type="button" id="edit-profile-btn" class="btn btn-primary">Editar dados</button>
                        <button type="submit" id="save-profile-btn" class="btn btn-success" style="display: none;">Salvar altera√ß√µes</button>
                        <button type="button" id="cancel-edit-btn" class="btn btn-secondary" style="display: none;">Cancelar</button>
                    </div>
                    <div id="profile-details-feedback" class="feedback-message"></div>
                </form>
            </div>
            
            <!-- Seguran√ßa -->
            <div id="security-section" class="content-section" style="display: none;">
                <h1>Seguran√ßa</h1>
                <p class="profile-subtitle">Mantenha sua conta segura</p>
                
                <form id="password-change-form">
                    <div class="form-section">
                        <h2>Alterar senha</h2>
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="new-password">Nova senha</label>
                                <input type="password" id="new-password" name="NOVA_SENHA_USUARIO" placeholder="Digite sua nova senha">
                            </div>
                            <div class="form-field">
                                <label for="confirm-new-password">Confirmar nova senha</label>
                                <input type="password" id="confirm-new-password" name="CONFIRM_SENHA_USUARIO" placeholder="Confirme sua nova senha">
                            </div>
                        </div>
                        <div class="btn-group">
                            <button type="submit" id="save-password-btn" class="btn btn-primary">Alterar senha</button>
                        </div>
                        <div id="password-feedback" class="feedback-message"></div>
                    </div>
                </form>
            </div>
            
            <!-- Outras se√ß√µes vazias por enquanto -->
            <div id="addresses-section" class="content-section" style="display: none;">
                <h1>Endere√ßos</h1>
                <p class="profile-subtitle">Gerencie seus endere√ßos de entrega</p>
                
                <div class="form-section">
                    <div class="section-header">
                        <h2>Endere√ßos cadastrados</h2>
                        <button class="btn btn-primary" onclick="addAddress()"><i class="fas fa-plus"></i> Adicionar endere√ßo</button>
                    </div>
                    <div id="addresses-list" style="padding: 20px; background: #f8f9fa; border-radius: 6px;">
                        <div class="address-item" data-main="true" style="padding: 20px; background: white; border-radius: 6px; margin-bottom: 15px; border-left: 4px solid #3483fa;">
                            <div style="display: flex; justify-content: space-between; align-items: flex-start;">
                                <div style="flex: 1;">
                                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                                        <span class="principal-badge" style="background: #3483fa; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: 600;">Principal</span>
                                        <h4 style="margin: 0; color: #333;">Casa</h4>
                                    </div>
                                    <p style="margin: 5px 0; color: #666;" id="main-address-display">
                                        <% if (typeof user !== 'undefined' && user && user.LOGRADOURO_USUARIO && user.LOGRADOURO_USUARIO !== 'N/A') { %>
                                            <%= user.LOGRADOURO_USUARIO %>, <%= user.NUMERO_USUARIO || 'S/N' %> - <%= user.BAIRRO_USUARIO %><br><%= user.CIDADE_USUARIO %>, <%= user.UF_USUARIO %> - <%= user.CEP_USUARIO %>
                                        <% } else { %>
                                            
                                        <% } %>
                                    </p>
                                </div>
                                <div class="address-actions">
                                    <button class="btn btn-secondary" onclick="editAddress(this)" style="background: #6c757d; color: white; margin-right: 10px;"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-secondary" onclick="removeAddress(this)" style="background: #dc3545; color: white;"><i class="fas fa-trash"></i></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Formul√°rio para adicionar endere√ßo -->
                    <div id="add-address-form" style="display: none; padding: 20px; background: white; border-radius: 6px; margin-top: 20px;">
                        <h3 style="margin-top: 0;">Adicionar novo endere√ßo</h3>
                        <div class="form-grid">
                            <div class="form-field">
                                <label>Nome do endere√ßo</label>
                                <input type="text" id="new-address-name" placeholder="Ex: Casa, Trabalho">
                            </div>
                            <div class="form-field">
                                <label>CEP</label>
                                <input type="text" id="new-address-cep" placeholder="00000-000" onblur="searchCep()" maxlength="9">
                                <small id="cep-status" style="margin-top: 5px; font-size: 12px;"></small>
                            </div>
                            <div class="form-field">
                                <label>Logradouro</label>
                                <input type="text" id="new-address-logradouro" placeholder="Rua, Avenida, etc.">
                            </div>
                            <div class="form-field">
                                <label>N√∫mero</label>
                                <input type="text" id="new-address-numero" placeholder="123">
                            </div>
                            <div class="form-field">
                                <label>Bairro</label>
                                <input type="text" id="new-address-bairro">
                            </div>
                            <div class="form-field">
                                <label>Cidade</label>
                                <input type="text" id="new-address-cidade">
                            </div>
                            <div class="form-field">
                                <label>Estado</label>
                                <input type="text" id="new-address-uf" placeholder="SP" maxlength="2">
                            </div>
                        </div>
                        <div style="margin: 20px 0;">
                            <label style="display: flex; align-items: center; gap: 8px; font-size: 14px; cursor: pointer;">
                                <input type="checkbox" id="set-as-main" style="margin: 0;">
                                Definir como endere√ßo principal
                            </label>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-success" onclick="saveNewAddress()">Salvar endere√ßo</button>
                            <button class="btn btn-secondary" onclick="cancelAddAddress()">Cancelar</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div id="cards-section" class="content-section" style="display: none;">
                <h1>Cart√µes</h1>
                <p class="profile-subtitle">Gerencie seus m√©todos de pagamento</p>
                
                <div class="form-section">
                    <div class="section-header">
                        <h2>Chave PIX</h2>
                        <div>
                            <button class="btn btn-primary" id="add-pix-btn" onclick="addPix()" style="display: none;"><i class="fas fa-plus"></i> Adicionar PIX</button>
                            <button class="btn btn-secondary" id="edit-pix-btn" onclick="editPix()" style="background: #ffc107; color: #000;"><i class="fas fa-edit"></i> Editar</button>
                            <button class="btn btn-secondary" id="remove-pix-btn" onclick="removePix()" style="background: #dc3545; color: white; margin-left: 10px;"><i class="fas fa-trash"></i> Remover</button>
                        </div>
                    </div>
                    <div id="pix-container">
                        <div class="form-grid">
                            <div class="form-field">
                                <label>Chave PIX cadastrada</label>
                                <input type="text" id="cards-pix" value="" readonly>
                            </div>
                        </div>
                    </div>
                    <div id="no-pix-message" style="display: none; padding: 20px; text-align: center; color: #666; background: #f8f9fa; border-radius: 6px;">
                        <i class="fas fa-credit-card" style="font-size: 48px; margin-bottom: 16px; color: #ddd;"></i>
                        <p>Nenhuma chave PIX cadastrada</p>
                        <p style="font-size: 14px;">Adicione uma chave PIX para receber pagamentos</p>
                    </div>
                </div>
                
                <div class="form-section">
                    <div class="section-header">
                        <h2>Cart√µes cadastrados</h2>
                        <button class="btn btn-primary" onclick="addCard()"><i class="fas fa-plus"></i> Adicionar cart√£o</button>
                    </div>
                    <div id="cards-list" style="padding: 20px; background: #f8f9fa; border-radius: 6px;">
                        <div style="padding: 40px; text-align: center; color: #666;">
                            <i class="fas fa-credit-card" style="font-size: 48px; margin-bottom: 16px; color: #ddd;"></i>
                            <p>Nenhum cart√£o cadastrado</p>
                            <p style="font-size: 14px;">Adicione cart√µes para facilitar suas compras</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div id="privacy-section" class="content-section" style="display: none;">
                <h1>Privacidade</h1>
                <p class="profile-subtitle">Controle suas configura√ß√µes de privacidade</p>
                
                <div class="form-section">
                    <h2>Documento</h2>
                    <div class="form-grid">
                        <div class="form-field">
                            <label>CPF/CNPJ</label>
                            <input type="text" id="privacy-document" value="***.***.***-**" readonly>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h2>Zona de perigo</h2>
                    <div style="padding: 20px; background: #fff5f5; border: 1px solid #fed7d7; border-radius: 6px;">
                        <h3 style="color: #e53e3e; margin-top: 0;">Excluir conta</h3>
                        <p style="color: #666; margin-bottom: 20px;">Esta a√ß√£o √© irrevers√≠vel. Todos os seus dados ser√£o permanentemente removidos.</p>
                        <button class="btn" style="background: #e53e3e; color: white;" onclick="confirmDeleteAccount()">Excluir minha conta</button>
                    </div>
                </div>
            </div>
            
            <div id="communications-section" class="content-section" style="display: none;">
                <h1>Comunica√ß√µes</h1>
                <p class="profile-subtitle">Gerencie suas prefer√™ncias de comunica√ß√£o</p>
                <p>Em desenvolvimento...</p>
            </div>
            

            
            <!-- √Årea do Vendedor -->
            <div id="seller-section" class="content-section" style="display: none;">
                <h1>√Årea do Vendedor</h1>
                <p class="profile-subtitle">Gerencie sua loja e vendas</p>



                <!-- Saque de Dinheiro -->
                <section class="seller-products-section">
                    <div class="section-header">
                        <h2>Saque de Dinheiro</h2>
                    </div>
                    <div style="display: flex; gap: 20px; align-items: center; justify-content: space-between; padding: 20px; background: #f8f9fa; border-radius: 8px; margin-bottom: 20px;">
                        <div>
                            <p style="margin: 0; font-size: 1.1rem; color: #333;">Valor dispon√≠vel para saque:</p>
                            <p style="margin: 5px 0 0 0; font-size: 1.8rem; font-weight: bold; color: #27AE60;" id="withdraw-amount">R$ 2.450,00</p>
                        </div>
                        <button class="btn btn-success" id="withdraw-btn" onclick="requestWithdraw()">
                            <i class="fas fa-money-bill-wave"></i> Solicitar Saque
                        </button>
                    </div>
                    <div class="metric-card" style="margin: 0;">
                        <div class="metric-number" id="seller-withdrawn-amount">R$ 1.200,00</div>
                        <div class="metric-label">Saques Anteriores</div>
                    </div>
                </section>

                <!-- Produtos do Vendedor -->
                <section class="seller-products-section">
                    <div class="section-header">
                        <h2>Meus Produtos</h2>
                        <a href="/criar-produto" class="btn btn-primary"><i class="fas fa-plus"></i> Cadastrar Novo Produto</a>
                    </div>
                    <div class="products-grid" id="seller-products-grid">
                        <!-- Produtos ser√£o carregados aqui -->
                    </div>
                </section>
            </div>
            
            <!-- √Årea do Admin -->
            <div id="admin-section" class="content-section" style="display: none;">
                <h1>Painel Administrativo</h1>
                <p class="profile-subtitle">Gerencie usu√°rios e vendedores da plataforma</p>

                <!-- Estat√≠sticas -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="admin-total-users">0</div>
                        <div class="stat-label">Total de Usu√°rios</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="admin-total-sellers">0</div>
                        <div class="stat-label">Vendedores</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="admin-total-products">0</div>
                        <div class="stat-label">Produtos</div>
                    </div>
                </div>

                <!-- Compradores -->
                <section class="seller-products-section">
                    <div class="section-header">
                        <h2>Compradores Cadastrados</h2>
                    </div>
                    <div style="background: white; border-radius: 8px; padding: 20px;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #f8f9fa;">
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">ID</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Nome</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Email</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Celular</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">A√ß√µes</th>
                                </tr>
                            </thead>
                            <tbody id="buyers-table">
                                <tr>
                                    <td colspan="5" style="padding: 20px; text-align: center; color: #666;">Carregando compradores...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>

                <!-- Vendedores -->
                <section class="seller-products-section">
                    <div class="section-header">
                        <h2>Vendedores Cadastrados</h2>
                    </div>
                    <div style="background: white; border-radius: 8px; padding: 20px;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #f8f9fa;">
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">ID</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Nome</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Email</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Documento</th>
                                    <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">A√ß√µes</th>
                                </tr>
                            </thead>
                            <tbody id="sellers-table">
                                <tr>
                                    <td colspan="5" style="padding: 20px; text-align: center; color: #666;">Carregando vendedores...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>
            </div>
            
            <!-- √Årea de Gerenciar Contas (Admin) -->
            <div id="admin-accounts-section" class="content-section" style="display: none;">
                <h1>Gerenciar Contas</h1>
                <p class="profile-subtitle">Visualize e gerencie todas as contas da plataforma</p>

                <!-- Estat√≠sticas Resumidas -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="accounts-total-buyers">0</div>
                        <div class="stat-label">Compradores</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="accounts-total-sellers">0</div>
                        <div class="stat-label">Vendedores</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="accounts-total-users">0</div>
                        <div class="stat-label">Total de Usu√°rios</div>
                    </div>
                </div>

                <!-- Compradores -->
                <section class="seller-products-section">
                    <div class="section-header">
                        <h2><i class="fas fa-shopping-cart"></i> Compradores Cadastrados</h2>
                    </div>
                    <div style="background: white; border-radius: 8px; padding: 20px; margin-bottom: 30px;">
                        <div style="overflow-x: auto;">
                            <table style="width: 100%; border-collapse: collapse; min-width: 600px;">
                                <thead>
                                    <tr style="background: #f8f9fa;">
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">ID</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Nome</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Email</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Celular</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">CPF</th>
                                    </tr>
                                </thead>
                                <tbody id="accounts-buyers-table">
                                    <tr>
                                        <td colspan="5" style="padding: 20px; text-align: center; color: #666;">Carregando compradores...</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>

                <!-- Vendedores -->
                <section class="seller-products-section">
                    <div class="section-header">
                        <h2><i class="fas fa-store"></i> Vendedores Cadastrados</h2>
                    </div>
                    <div style="background: white; border-radius: 8px; padding: 20px;">
                        <div style="overflow-x: auto;">
                            <table style="width: 100%; border-collapse: collapse; min-width: 700px;">
                                <thead>
                                    <tr style="background: #f8f9fa;">
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">ID</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Nome</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Email</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Celular</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Documento</th>
                                        <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; font-weight: 600;">Nome da Loja</th>
                                    </tr>
                                </thead>
                                <tbody id="accounts-sellers-table">
                                    <tr>
                                        <td colspan="6" style="padding: 20px; text-align: center; color: #666;">Carregando vendedores...</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <!-- Modal de Confirma√ß√£o -->
    <div id="confirmation-modal" class="confirmation-modal">
        <div class="modal-content">
            <h3 id="modal-title">Confirmar a√ß√£o</h3>
            <p id="modal-message">Tem certeza que deseja continuar?</p>
            <div class="modal-buttons">
                <button class="btn btn-secondary" onclick="closeConfirmationModal()">Cancelar</button>
                <button class="btn" id="modal-confirm-btn" style="background: #dc3545; color: white;">Confirmar</button>
            </div>
        </div>
    </div>

    <!-- Modal de Saque -->
    <div id="withdraw-modal" class="withdraw-modal">
        <div class="withdraw-modal-content">
            <h3 style="margin: 0 0 20px 0; color: #333;">Solicitar Saque</h3>
            <p style="margin: 0 0 20px 0; color: #666;">Valor: <strong id="withdraw-modal-amount">R$ 0,00</strong></p>
            <p style="margin: 0 0 20px 0; color: #666;">Escolha a forma de recebimento:</p>
            
            <div id="payment-options">
                <!-- Op√ß√µes ser√£o carregadas dinamicamente -->
            </div>
            
            <div class="modal-buttons" style="margin-top: 25px;">
                <button class="btn btn-secondary" onclick="closeWithdrawModal()">Cancelar</button>
                <button class="btn btn-success" onclick="confirmWithdraw()">Confirmar Saque</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="js/auth.js"></script>
    <script src="js/navbar.js"></script>
    <script>
        // Carregar dados do usu√°rio
        document.addEventListener('DOMContentLoaded', function() {
            loadProfileImageFromStorage();
            loadUserData();
            setupEditControls();
            checkSellerStatus();
            setupProfileImageUpload();
            
            // Garantir sincroniza√ß√£o das imagens ap√≥s carregamento
            setTimeout(() => {
                const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
                if (loggedUser && loggedUser.profileImage) {
                    syncProfileImages(loggedUser.profileImage);
                }
            }, 200);
        });
        
        function loadProfileImageFromStorage() {
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            const userProfileImage = document.getElementById('user-profile-image');
            const headerProfileImage = document.getElementById('header-profile-image');
            
            if (loggedUser) {
                if (loggedUser.profileImage) {
                    // Usar imagem salva
                    if (userProfileImage) userProfileImage.src = loggedUser.profileImage;
                    if (headerProfileImage) headerProfileImage.src = loggedUser.profileImage;
                } else {
                    // Usar placeholder com inicial do nome
                    const firstName = loggedUser.name ? loggedUser.name.split(' ')[0] : 'U';
                    const placeholderUrl = `https://placehold.co/80x80/cccccc/333333?text=${firstName.charAt(0)}`;
                    const headerPlaceholderUrl = `https://placehold.co/32x32/cccccc/333333?text=${firstName.charAt(0)}`;
                    
                    if (userProfileImage) userProfileImage.src = placeholderUrl;
                    if (headerProfileImage) headerProfileImage.src = headerPlaceholderUrl;
                }
            }
        }
        
        function setupProfileImageUpload() {
            const profileImageInput = document.getElementById('profile-image-input');
            const userProfileImage = document.getElementById('user-profile-image');
            const headerProfileImage = document.getElementById('header-profile-image');
            
            if (profileImageInput) {
                profileImageInput.addEventListener('change', function(event) {
                    const file = event.target.files[0];
                    if (file) {
                        if (file.size > 2 * 1024 * 1024) {
                            alert('A imagem deve ter no m√°ximo 2MB.');
                            return;
                        }
                        
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const base64Image = e.target.result;
                            userProfileImage.src = base64Image;
                            if (headerProfileImage) {
                                headerProfileImage.src = base64Image;
                            }
                            
                            // Salvar imagem automaticamente
                            saveProfileImage(base64Image);
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
        }
        
        async function saveProfileImage(base64Image) {
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            if (!loggedUser) return;
            
            try {
                const response = await fetch('/api/update-profile-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: loggedUser.id,
                        imageBase64: base64Image
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Atualizar localStorage
                    loggedUser.profileImage = base64Image;
                    localStorage.setItem('loggedUser', JSON.stringify(loggedUser));
                    
                    // Sincronizar ambas as imagens
                    syncProfileImages(base64Image);
                    
                    // Mostrar feedback
                    showToast('Foto de perfil atualizada com sucesso!', 'success');
                } else {
                    showToast('Erro ao salvar foto de perfil', 'error');
                }
            } catch (error) {
                console.error('Erro ao salvar imagem:', error);
                showToast('Erro ao salvar foto de perfil', 'error');
            }
        }
        
        function syncProfileImages(imageUrl) {
            const userProfileImage = document.getElementById('user-profile-image');
            const headerProfileImage = document.getElementById('header-profile-image');
            
            if (userProfileImage && imageUrl) userProfileImage.src = imageUrl;
            if (headerProfileImage && imageUrl) headerProfileImage.src = imageUrl;
            
            // Atualizar √≠cone do header se a fun√ß√£o existir
            if (typeof window.updateProfileIcon === 'function') {
                window.updateProfileIcon(imageUrl);
            }
        }
        
        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 5px;
                color: white;
                font-weight: bold;
                z-index: 10000;
                background: ${type === 'success' ? '#28a745' : '#dc3545'};
            `;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
        
        function saveAddressesToStorage() {
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            if (!loggedUser) return;
            
            const addresses = [];
            const addressItems = document.querySelectorAll('#addresses-list .address-item');
            
            addressItems.forEach(item => {
                const isMain = item.getAttribute('data-main') === 'true';
                const titleElement = item.querySelector('h4');
                const addressText = item.querySelector('p').innerHTML;
                
                if (titleElement && addressText) {
                    addresses.push({
                        name: titleElement.textContent.trim(),
                        address: addressText,
                        isMain: isMain
                    });
                }
            });
            
            localStorage.setItem(`addresses_${loggedUser.id}`, JSON.stringify(addresses));
        }
        

        
        async function loadUserData() {
            // Buscar dados do usu√°rio logado
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            
            if (!loggedUser) {
                console.log('PERFIL.EJS: loggedUser n√£o encontrado, tentando redirecionar');
                // window.location.href = '/login';
                return;
            }
            
            try {
                // Buscar dados completos do usu√°rio
                const response = await fetch(`/api/user/${loggedUser.id}`);
                const result = await response.json();
                
                if (result.success) {
                    const fullUserData = result.user;
                    
                    const userData = {
                        nome: fullUserData.NOME_USUARIO || loggedUser.name || '',
                        email: fullUserData.EMAIL_USUARIO || loggedUser.email || '',
                        celular: fullUserData.CELULAR_USUARIO || '',
                        dataNasc: fullUserData.DT_NASC_USUARIO || '',
                        cep: fullUserData.CEP_USUARIO || '',
                        logradouro: fullUserData.LOGRADOURO_USUARIO || '',
                        bairro: fullUserData.BAIRRO_USUARIO || '',
                        cidade: fullUserData.CIDADE_USUARIO || '',
                        uf: fullUserData.UF_USUARIO || '',
                        isVendedor: fullUserData.TIPO_USUARIO === 'seller',
                        profileImage: fullUserData.IMAGEM_PERFIL_BASE64
                    };
                    
                    // Sincronizar imagens de perfil
                    const currentUser = JSON.parse(localStorage.getItem('loggedUser'));
                    const userProfileImage = document.getElementById('user-profile-image');
                    const headerProfileImage = document.getElementById('header-profile-image');
                    
                    // Priorizar imagem do localStorage, depois da API
                    let imageToUse = currentUser?.profileImage || userData.profileImage;
                    
                    if (imageToUse) {
                        if (userProfileImage) userProfileImage.src = imageToUse;
                        if (headerProfileImage) headerProfileImage.src = imageToUse;
                        
                        // Salvar no localStorage se veio da API
                        if (!currentUser?.profileImage && userData.profileImage && currentUser) {
                            currentUser.profileImage = userData.profileImage;
                            localStorage.setItem('loggedUser', JSON.stringify(currentUser));
                        }
                    } else {
                        const firstName = userData.nome.split(' ')[0] || 'U';
                        if (userProfileImage) userProfileImage.src = `https://placehold.co/80x80/cccccc/333333?text=${firstName.charAt(0)}`;
                        if (headerProfileImage) {
                            headerProfileImage.src = `https://placehold.co/32x32/cccccc/333333?text=${firstName.charAt(0)}`;
                        }
                    }
                    
                    populateUserFields(userData);
                    updateMainAddress(userData);
                } else {
                    // Fallback para dados b√°sicos do login
                    const userData = {
                        nome: loggedUser.name || 'Usu√°rio',
                        email: loggedUser.email || '',
                        celular: '',
                        dataNasc: '',
                        isVendedor: loggedUser.type === 'seller'
                    };
                    
                    populateUserFields(userData);
                    updateMainAddress(userData);
                }
            } catch (error) {
                console.error('Erro ao carregar dados do usu√°rio:', error);
                // Fallback para dados b√°sicos do login
                const userData = {
                    nome: loggedUser.name || 'Usu√°rio',
                    email: loggedUser.email || '',
                    celular: '',
                    dataNasc: '',
                    isVendedor: loggedUser.type === 'seller'
                };
                
                populateUserFields(userData);
            }
        }
        
        function updateMainAddress(userData) {
            const mainAddressDisplay = document.getElementById('main-address-display');
            if (mainAddressDisplay) {
                if (userData.logradouro && userData.cidade && userData.logradouro !== 'N/A' && userData.cidade !== 'N/A') {
                    const address = `${userData.logradouro} - ${userData.bairro}<br>${userData.cidade}, ${userData.uf} - ${userData.cep}`;
                    mainAddressDisplay.innerHTML = address;
                } else {
                    mainAddressDisplay.innerHTML = 'Nenhum endere√ßo cadastrado';
                }
            }
        }
        
        function populateUserFields(userData) {
            console.log('Preenchendo campos com dados:', userData);
            
            // Preencher campos
            const nameInput = document.getElementById('profile-name-input');
            const emailInput = document.getElementById('profile-email-input');
            const celularInput = document.getElementById('profile-celular-input');
            const dataNascInput = document.getElementById('profile-dataNasc-input');
            const typeDisplay = document.getElementById('profile-type-display');
            
            if (nameInput) nameInput.value = userData.nome || '';
            if (emailInput) emailInput.value = userData.email || '';
            if (celularInput) celularInput.value = userData.celular || '';
            if (dataNascInput) dataNascInput.value = userData.dataNasc || '';
            
            // Detectar tipo de usu√°rio e configurar interface
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            let userType = 'Cliente';
            let isAdmin = false;
            let isSeller = false;
            
            if (loggedUser) {
                if (loggedUser.type === 'admin' || loggedUser.role === 'admin') {
                    userType = 'Administrador';
                    isAdmin = true;
                } else if (loggedUser.type === 'seller' || userData.isVendedor) {
                    userType = 'Vendedor';
                    isSeller = true;
                }
            }
            
            if (typeDisplay) typeDisplay.value = userType;
            
            // Atualizar sidebar
            const firstName = userData.nome ? userData.nome.split(' ')[0] : 'Usu√°rio';
            document.getElementById('profile-display-name').textContent = firstName;
            
            // Configurar interface baseada no tipo de usu√°rio
            setupUserInterface(isAdmin, isSeller);
            
            // N√£o sobrescrever imagens se j√° existem no localStorage
            const currentUser = JSON.parse(localStorage.getItem('loggedUser'));
            if (!currentUser?.profileImage) {
                const userProfileImage = document.getElementById('user-profile-image');
                const headerProfileImage = document.getElementById('header-profile-image');
                
                if (userData.profileImage) {
                    if (userProfileImage) userProfileImage.src = userData.profileImage;
                    if (headerProfileImage) headerProfileImage.src = userData.profileImage;
                } else {
                    if (userProfileImage) userProfileImage.src = `https://placehold.co/80x80/cccccc/333333?text=${firstName.charAt(0)}`;
                    if (headerProfileImage) headerProfileImage.src = `https://placehold.co/32x32/cccccc/333333?text=${firstName.charAt(0)}`;
                }
            }
        }
        
        function setupUserInterface(isAdmin, isSeller) {
            // Elementos do menu
            const sellerMenuItem = document.getElementById('seller-menu-item');
            const quickSellerBtn = document.getElementById('quick-seller-btn');
            const dashboardChart = document.getElementById('dashboard-chart');
            
            // Se√ß√µes de conte√∫do
            const adminSection = document.getElementById('admin-section');
            const sellerSection = document.getElementById('seller-section');
            
            if (isAdmin) {
                // Mostrar funcionalidades de admin
                if (adminSection) adminSection.style.display = 'block';
                
                // Adicionar item de menu admin se n√£o existir
                const adminMenuItem = document.querySelector('[data-section="admin"]');
                if (!adminMenuItem) {
                    const profileMenu = document.querySelector('.profile-menu');
                    const adminLi = document.createElement('li');
                    adminLi.innerHTML = '<a href="#" data-section="admin"><i class="fas fa-users-cog"></i><span>Administra√ß√£o</span></a>';
                    profileMenu.appendChild(adminLi);
                    
                    // Adicionar event listener
                    adminLi.querySelector('a').addEventListener('click', function(e) {
                        e.preventDefault();
                        document.querySelectorAll('.profile-menu a').forEach(l => l.classList.remove('active'));
                        this.classList.add('active');
                        document.querySelectorAll('.content-section').forEach(section => section.style.display = 'none');
                        document.getElementById('admin-section').style.display = 'block';
                        loadAdminData();
                    });
                }
            }
            
            if (isSeller) {
                // Mostrar funcionalidades de vendedor
                if (sellerMenuItem) sellerMenuItem.style.display = 'block';
                if (quickSellerBtn) quickSellerBtn.style.display = 'inline-block';
                if (dashboardChart) {
                    dashboardChart.style.display = 'block';
                    initDashboardChart();
                }
            }
        }
        
        function setupEditControls() {
            const editBtn = document.getElementById('edit-profile-btn');
            const saveBtn = document.getElementById('save-profile-btn');
            const cancelBtn = document.getElementById('cancel-edit-btn');
            const inputs = document.querySelectorAll('#personal-section input');
            let originalData = {};
            
            editBtn.addEventListener('click', function() {
                // Salvar dados originais
                inputs.forEach(input => {
                    originalData[input.id] = input.value;
                    input.readOnly = false;
                });
                
                // Trocar bot√µes
                editBtn.style.display = 'none';
                saveBtn.style.display = 'inline-block';
                cancelBtn.style.display = 'inline-block';
            });
            
            cancelBtn.addEventListener('click', function() {
                // Restaurar dados originais
                inputs.forEach(input => {
                    input.value = originalData[input.id];
                    input.readOnly = true;
                });
                
                // Trocar bot√µes
                editBtn.style.display = 'inline-block';
                saveBtn.style.display = 'none';
                cancelBtn.style.display = 'none';
            });
            
            saveBtn.addEventListener('click', async function(e) {
                e.preventDefault();
                
                const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
                if (!loggedUser) return;
                
                const updateData = {
                    id: loggedUser.id,
                    nome: document.getElementById('profile-name-input').value,
                    email: document.getElementById('profile-email-input').value,
                    celular: document.getElementById('profile-celular-input').value,
                    data_nascimento: document.getElementById('profile-dataNasc-input').value
                };
                
                try {
                    const response = await fetch('/api/admin/user-details', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(updateData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Dados salvos com sucesso!', 'success');
                        
                        // Tornar campos readonly novamente
                        inputs.forEach(input => {
                            input.readOnly = true;
                        });
                        
                        // Trocar bot√µes
                        editBtn.style.display = 'inline-block';
                        saveBtn.style.display = 'none';
                        cancelBtn.style.display = 'none';
                        
                        // Atualizar sidebar
                        const firstName = document.getElementById('profile-name-input').value.split(' ')[0];
                        document.getElementById('profile-display-name').textContent = firstName;
                    } else {
                        showToast('Erro ao salvar dados', 'error');
                    }
                } catch (error) {
                    console.error('Erro ao salvar:', error);
                    showToast('Erro ao salvar dados', 'error');
                }
            });
        }
        
        function checkSellerStatus() {
            // Verificar se usu√°rio √© vendedor e ocultar "Seja um Vendedor" do header
            const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
            
            if (loggedUser && (loggedUser.type === 'seller' || loggedUser.sellerId)) {
                // Ocultar "Seja um Vendedor" do menu principal se existir
                const sellerLinks = document.querySelectorAll('a[href="/cadastro"]');
                sellerLinks.forEach(link => {
                    if (link.textContent.includes('Seja um Vendedor')) {
                        link.style.display = 'none';
                    }
                });
            }
        }
        
        // Navega√ß√£o entre se√ß√µes
        document.querySelectorAll('.profile-menu a').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Remove active class from all links
                document.querySelectorAll('.profile-menu a').forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                // Hide all sections
                document.querySelectorAll('.content-section').forEach(section => {
                    section.style.display = 'none';
                });
                
                // Show selected section
                const sectionId = this.dataset.section + '-section';
                const section = document.getElementById(sectionId);
                if (section) {
                    section.style.display = 'block';
                    
                    // Se for a se√ß√£o do vendedor, inicializar gr√°fico
                    if (sectionId === 'seller-section') {
                        initSellerSection();
                    }
                    
                    // Se for a se√ß√£o do admin, carregar dados
                    if (sectionId === 'admin-section') {
                        loadAdminData();
                    }
                    

                }
            });
        });
        
        // Fun√ß√µes da √Årea do Vendedor
        let salesChart;
        let dashboardChart;
        
        const salesData = {
            7: {
                labels: ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom'],
                data: [12, 19, 8, 15, 22, 18, 25],
                total: 119,
                revenue: 2975
            },
            30: {
                labels: ['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4'],
                data: [85, 120, 95, 140],
                total: 440,
                revenue: 11000
            },
            365: {
                labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                data: [450, 520, 380, 600, 720, 650, 800, 750, 680, 900, 850, 950],
                total: 8250,
                revenue: 206250
            }
        };
        
        function initSellerSection() {
            loadSellerMetrics();
            loadSellerProducts();
        }
        
        function requestWithdraw() {
            const amount = document.getElementById('withdraw-amount').textContent;
            document.getElementById('withdraw-modal-amount').textContent = amount;
            loadPaymentOptions();
            document.getElementById('withdraw-modal').style.display = 'flex';
        }
        
        function loadPaymentOptions() {
            const paymentOptionsDiv = document.getElementById('payment-options');
            let options = '';
            
            // Op√ß√£o PIX
            const pixValue = document.getElementById('cards-pix').value;
            if (pixValue && pixValue.trim()) {
                options += `
                    <div class="payment-option" onclick="selectPaymentOption(this)">
                        <input type="radio" name="payment-method" value="pix">
                        <div class="payment-details">
                            <div class="payment-title">PIX</div>
                            <div class="payment-info">${pixValue}</div>
                        </div>
                    </div>
                `;
            }
            
            // Op√ß√µes de Cart√£o
            const cardItems = document.querySelectorAll('#cards-list .card-item');
            cardItems.forEach((card, index) => {
                const cardNumber = card.querySelector('p').textContent;
                const cardType = card.querySelectorAll('p')[1].textContent;
                options += `
                    <div class="payment-option" onclick="selectPaymentOption(this)">
                        <input type="radio" name="payment-method" value="card-${index}">
                        <div class="payment-details">
                            <div class="payment-title">Cart√£o</div>
                            <div class="payment-info">${cardNumber}<br>${cardType}</div>
                        </div>
                    </div>
                `;
            });
            
            // Op√ß√£o Boleto
            options += `
                <div class="payment-option" onclick="selectPaymentOption(this)">
                    <input type="radio" name="payment-method" value="boleto">
                    <div class="payment-details">
                        <div class="payment-title">Boleto Banc√°rio</div>
                        <div class="payment-info">Receba por boleto banc√°rio</div>
                    </div>
                </div>
            `;
            
            paymentOptionsDiv.innerHTML = options;
        }
        
        function selectPaymentOption(element) {
            document.querySelectorAll('.payment-option').forEach(opt => opt.classList.remove('selected'));
            element.classList.add('selected');
            element.querySelector('input[type="radio"]').checked = true;
        }
        
        function closeWithdrawModal() {
            document.getElementById('withdraw-modal').style.display = 'none';
        }
        
        function confirmWithdraw() {
            const selectedPayment = document.querySelector('input[name="payment-method"]:checked');
            if (!selectedPayment) {
                showConfirmationModal(
                    'Selecione um m√©todo',
                    'Por favor, selecione uma forma de recebimento.',
                    function() {}
                );
                return;
            }
            
            const amount = document.getElementById('withdraw-modal-amount').textContent;
            const paymentMethod = selectedPayment.value;
            let methodText = '';
            
            if (paymentMethod === 'pix') {
                methodText = 'PIX';
            } else if (paymentMethod.startsWith('card-')) {
                methodText = 'Cart√£o';
            } else if (paymentMethod === 'boleto') {
                methodText = 'Boleto Banc√°rio';
            }
            
            closeWithdrawModal();
            showConfirmationModal(
                'Saque solicitado',
                `Saque de ${amount} via ${methodText} solicitado com sucesso! Voc√™ receber√° uma confirma√ß√£o por email.`,
                function() {
                    document.getElementById('withdraw-amount').textContent = 'R$ 0,00';
                }
            );
        }
        
        async function loadSellerMetrics() {
            try {
                const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
                if (!loggedUser || (!loggedUser.sellerId && !loggedUser.id)) {
                    return;
                }
                

                document.getElementById('dashboard-chart-total-sales').textContent = salesData[7].total;
                document.getElementById('dashboard-chart-revenue').textContent = 'R$ ' + salesData[7].revenue.toLocaleString('pt-BR') + ',00';
                document.getElementById('dashboard-products-count').textContent = '15';
                
                // Atualizar √°rea do vendedor
                document.getElementById('seller-withdrawn-amount').textContent = 'R$ 1.200,00';
                
                // Atualizar √°rea de saque
                document.getElementById('withdraw-amount').textContent = 'R$ 2.450,00';
            } catch (error) {
                console.error('Erro ao carregar m√©tricas:', error);
            }
        }
        
        async function loadSellerProducts() {
            try {
                const loggedUser = JSON.parse(localStorage.getItem('loggedUser'));
                if (!loggedUser || (!loggedUser.sellerId && !loggedUser.id)) {
                    document.getElementById('seller-products-grid').innerHTML = '<p>Fa√ßa login como vendedor para ver seus produtos.</p>';
                    return;
                }
                
                const sellerId = loggedUser.sellerId || loggedUser.id;
                const response = await fetch(`/api/products?seller_id=${sellerId}`);
                const result = await response.json();
                
                if (result.success && result.products.length > 0) {
                    const grid = document.getElementById('seller-products-grid');
                    grid.innerHTML = result.products.map(product => {
                        const imageUrl = product.IMAGEM_BASE64 
                            ? `data:image/jpeg;base64,${product.IMAGEM_BASE64}`
                            : product.IMAGEM_URL || 'imagens/produto-default.jpg';
                        
                        const price = parseFloat(product.VALOR_UNITARIO).toFixed(2).replace('.', ',');
                        
                        return `
                            <div class="product-card">
                                <img src="${imageUrl}" alt="${product.NOME_PROD}" class="product-image">
                                <div class="product-info">
                                    <div class="product-name">${product.NOME_PROD}</div>
                                    <div class="product-price">R$ ${price}</div>
                                </div>
                            </div>
                        `;
                    }).join('');
                } else {
                    document.getElementById('seller-products-grid').innerHTML = `
                        <div style="text-align: center; padding: 40px; color: #666;">
                            <i class="fas fa-box-open" style="font-size: 48px; margin-bottom: 16px; color: #ddd;"></i>
                            <p>Voc√™ ainda n√£o tem produtos cadastrados.</p>
                            <p style="font-size: 14px;">Clique em "Cadastrar Novo Produto" para come√ßar.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Erro ao carregar produtos:', error);
                document.getElementById('seller-products-grid').innerHTML = '<p>Erro ao carregar produtos.</p>';
            }
        }
        
        function showSellerSection() {
            document.querySelectorAll('.profile-menu a').forEach(l => l.classList.remove('active'));
            document.getElementById('seller-menu-item').classList.add('active');
            
            document.querySelectorAll('.content-section').forEach(section => {
                section.style.display = 'none';
            });
            
            document.getElementById('seller-section').style.display = 'block';
            initSellerSection();
        }
        
        function addCard() {
            const cardNumber = prompt('Digite o n√∫mero do cart√£o (√∫ltimos 4 d√≠gitos):');
            const cardType = prompt('Digite a bandeira (Visa/Mastercard):');
            const cardExpiry = prompt('Digite a validade (MM/AA):');
            
            if (cardNumber && cardType && cardExpiry) {
                const cardsList = document.getElementById('cards-list');
                const color = cardType.toLowerCase() === 'visa' ? '#3483fa' : '#ff6b35';
                
                const newCard = document.createElement('div');
                newCard.className = 'card-item';
                newCard.style.cssText = 'display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px; padding: 15px; background: white; border-radius: 6px;';
                newCard.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 15px;">
                        <i class="fas fa-credit-card" style="font-size: 24px; color: ${color};"></i>
                        <div>
                            <p style="margin: 0; font-weight: 600;">**** **** **** ${cardNumber}</p>
                            <p style="margin: 0; font-size: 14px; color: #666;">${cardType} - V√°lido at√© ${cardExpiry}</p>
                        </div>
                    </div>
                    <button class="btn btn-secondary" onclick="removeCard(this)" style="background: #dc3545; color: white;"><i class="fas fa-trash"></i></button>
                `;
                cardsList.appendChild(newCard);
                alert('Cart√£o adicionado com sucesso!');
            }
        }
        
        function removeCard(button) {
            if (confirm('Deseja remover este cart√£o?')) {
                button.closest('.card-item').remove();
                alert('Cart√£o removido com sucesso!');
            }
        }
        
        function addPix() {
            const pixKey = prompt('Digite sua chave PIX (email, telefone, CPF ou chave aleat√≥ria):');
            
            if (pixKey && pixKey.trim()) {
                document.getElementById('cards-pix').value = pixKey.trim();
                document.getElementById('pix-container').style.display = 'block';
                document.getElementById('no-pix-message').style.display = 'none';
                document.getElementById('add-pix-btn').style.display = 'none';
                document.getElementById('edit-pix-btn').style.display = 'inline-block';
                document.getElementById('remove-pix-btn').style.display = 'inline-block';
                alert('Chave PIX adicionada com sucesso!');
            }
        }
        
        function editPix() {
            const currentPix = document.getElementById('cards-pix').value;
            const newPix = prompt('Digite a nova chave PIX:', currentPix);
            
            if (newPix && newPix.trim() && newPix !== currentPix) {
                document.getElementById('cards-pix').value = newPix.trim();
                alert('Chave PIX atualizada com sucesso!');
            }
        }
        
        function removePix() {
            if (confirm('Deseja remover sua chave PIX?\n\nVoc√™ n√£o poder√° receber pagamentos via PIX.')) {
                document.getElementById('cards-pix').value = '';
                document.getElementById('pix-container').style.display = 'none';
                document.getElementById('no-pix-message').style.display = 'block';
                document.getElementById('add-pix-btn').style.display = 'inline-block';
                document.getElementById('edit-pix-btn').style.display = 'none';
                document.getElementById('remove-pix-btn').style.display = 'none';
                alert('Chave PIX removida com sucesso!');
            }
        }
        
        function addAddress() {
            document.getElementById('add-address-form').style.display = 'block';
            document.querySelector('#add-address-form h3').textContent = 'Adicionar novo endere√ßo';
            document.querySelector('#add-address-form .btn-success').textContent = 'Salvar endere√ßo';
            document.getElementById('add-address-form').removeAttribute('data-editing');
        }
        
        function editAddress(button) {
            const addressItem = button.closest('.address-item');
            const nameElement = addressItem.querySelector('h4');
            const addressElement = addressItem.querySelector('p');
            const isMain = addressItem.getAttribute('data-main') === 'true';
            
            // Extrair dados do endere√ßo
            const name = nameElement.textContent.trim();
            const addressText = addressElement.innerHTML;
            
            // Parse do endere√ßo (formato: "Rua, 123 - Bairro<br>Cidade, UF - CEP")
            const parts = addressText.split('<br>');
            const firstLine = parts[0]; // "Rua, 123 - Bairro"
            const secondLine = parts[1]; // "Cidade, UF - CEP"
            
            const [logradouroNumero, bairro] = firstLine.split(' - ');
            const [logradouro, numero] = logradouroNumero.split(', ');
            const [cidadeUf, cep] = secondLine.split(' - ');
            const [cidade, uf] = cidadeUf.split(', ');
            
            // Preencher formul√°rio
            document.getElementById('new-address-name').value = name;
            document.getElementById('new-address-cep').value = cep;
            document.getElementById('new-address-logradouro').value = logradouro;
            document.getElementById('new-address-numero').value = numero;
            document.getElementById('new-address-bairro').value = bairro;
            document.getElementById('new-address-cidade').value = cidade;
            document.getElementById('new-address-uf').value = uf;
            document.getElementById('set-as-main').checked = isMain;
            
            // Configurar formul√°rio para edi√ß√£o
            document.querySelector('#add-address-form h3').textContent = 'Editar endere√ßo';
            document.querySelector('#add-address-form .btn-success').textContent = 'Salvar altera√ß√µes';
            document.getElementById('add-address-form').setAttribute('data-editing', addressItem.dataset.index || '');
            document.getElementById('add-address-form').style.display = 'block';
        }
        
        function saveNewAddress() {
            const addressName = document.getElementById('new-address-name').value;
            const cep = document.getElementById('new-address-cep').value;
            const logradouro = document.getElementById('new-address-logradouro').value;
            const numero = document.getElementById('new-address-numero').value;
            const bairro = document.getElementById('new-address-bairro').value;
            const cidade = document.getElementById('new-address-cidade').value;
            const uf = document.getElementById('new-address-uf').value;
            const setAsMain = document.getElementById('set-as-main').checked;
            const isEditing = document.getElementById('add-address-form').hasAttribute('data-editing');
            
            if (addressName && cep && logradouro && numero && bairro && cidade && uf) {
                const addressesList = document.getElementById('addresses-list');
                
                // Se estiver editando, remover o endere√ßo atual
                if (isEditing) {
                    const existingAddresses = addressesList.querySelectorAll('.address-item');
                    const editingName = document.getElementById('new-address-name').defaultValue || addressName;
                    existingAddresses.forEach(addr => {
                        const nameEl = addr.querySelector('h4');
                        if (nameEl && nameEl.textContent.trim() === editingName) {
                            addr.remove();
                        }
                    });
                } else {
                    // Verificar se CEP j√° existe (apenas para novos endere√ßos)
                    const existingAddresses = addressesList.querySelectorAll('.address-item');
                    const cleanCep = cep.replace(/\D/g, '');
                    
                    for (let address of existingAddresses) {
                        const addressText = address.textContent;
                        const existingCep = addressText.match(/\d{5}-?\d{3}/);
                        if (existingCep && existingCep[0].replace(/\D/g, '') === cleanCep) {
                            showConfirmationModal(
                                'CEP duplicado',
                                'J√° existe um endere√ßo cadastrado com este CEP.',
                                function() {}
                            );
                            return;
                        }
                    }
                }
                
                // Se definir como principal, remover badge principal de outros endere√ßos
                if (setAsMain) {
                    const allAddresses = addressesList.querySelectorAll('.address-item');
                    allAddresses.forEach(address => {
                        if (address.getAttribute('data-main') === 'true') {
                            address.removeAttribute('data-main');
                            address.style.borderLeft = 'none';
                            const badge = address.querySelector('.principal-badge');
                            if (badge) badge.remove();
                            
                            // Adicionar bot√£o "Definir como principal"
                            const actionsDiv = address.querySelector('.address-actions');
                            if (actionsDiv && !actionsDiv.querySelector('.set-main-btn')) {
                                const setMainBtn = document.createElement('button');
                                setMainBtn.className = 'btn btn-secondary set-main-btn';
                                setMainBtn.style.cssText = 'background: #ffc107; color: #000; margin-right: 10px;';
                                setMainBtn.innerHTML = '<i class="fas fa-star"></i>';
                                setMainBtn.onclick = function() { setAsMainAddress(this); };
                                actionsDiv.insertBefore(setMainBtn, actionsDiv.firstChild);
                            }
                        }
                    });
                }
                
                const newAddress = document.createElement('div');
                newAddress.className = 'address-item';
                if (setAsMain) {
                    newAddress.setAttribute('data-main', 'true');
                    newAddress.style.cssText = 'padding: 20px; background: white; border-radius: 6px; margin-bottom: 15px; border-left: 4px solid #3483fa;';
                } else {
                    newAddress.style.cssText = 'padding: 20px; background: white; border-radius: 6px; margin-bottom: 15px;';
                }
                
                const principalBadge = setAsMain ? '<span class="principal-badge" style="background: #3483fa; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: 600; margin-right: 10px;">Principal</span>' : '';
                const setMainButton = setAsMain ? '' : '<button class="btn btn-secondary set-main-btn" onclick="setAsMainAddress(this)" style="background: #ffc107; color: #000; margin-right: 10px;"><i class="fas fa-star"></i></button>';
                
                newAddress.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: flex-start;">
                        <div style="flex: 1;">
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                ${principalBadge}
                                <h4 style="margin: 0; color: #333;">${addressName}</h4>
                            </div>
                            <p style="margin: 5px 0; color: #666;">${logradouro}, ${numero} - ${bairro}<br>${cidade}, ${uf} - ${cep}</p>
                        </div>
                        <div class="address-actions">
                            <button class="btn btn-secondary" onclick="editAddress(this)" style="background: #6c757d; color: white; margin-right: 10px;"><i class="fas fa-edit"></i></button>
                            ${setMainButton}
                            <button class="btn btn-secondary" onclick="removeAddress(this)" style="background: #dc3545; color: white;"><i class="fas fa-trash"></i></button>
                        </div>
                    </div>
                `;
                addressesList.appendChild(newAddress);
                saveAddressesToStorage();
                
                // Limpar formul√°rio e ocultar
                document.getElementById('new-address-name').value = '';
                document.getElementById('new-address-cep').value = '';
                document.getElementById('new-address-logradouro').value = '';
                document.getElementById('new-address-numero').value = '';
                document.getElementById('new-address-bairro').value = '';
                document.getElementById('new-address-cidade').value = '';
                document.getElementById('new-address-uf').value = '';
                document.getElementById('set-as-main').checked = false;
                document.getElementById('cep-status').textContent = '';
                document.getElementById('add-address-form').style.display = 'none';
            } else {
                showConfirmationModal(
                    'Campos obrigat√≥rios',
                    'Por favor, preencha todos os campos.',
                    function() {}
                );
            }
        }
        
        function cancelAddAddress() {
            // Limpar formul√°rio e ocultar
            document.getElementById('new-address-name').value = '';
            document.getElementById('new-address-cep').value = '';
            document.getElementById('new-address-logradouro').value = '';
            document.getElementById('new-address-numero').value = '';
            document.getElementById('new-address-bairro').value = '';
            document.getElementById('new-address-cidade').value = '';
            document.getElementById('new-address-uf').value = '';
            document.getElementById('set-as-main').checked = false;
            document.getElementById('cep-status').textContent = '';
            document.getElementById('add-address-form').style.display = 'none';
        }
        
        async function searchCep() {
            const cep = document.getElementById('new-address-cep').value.replace(/\D/g, '');
            const statusElement = document.getElementById('cep-status');
            
            if (cep.length !== 8) {
                statusElement.textContent = 'CEP deve ter 8 d√≠gitos';
                statusElement.style.color = '#dc3545';
                return;
            }
            
            statusElement.textContent = 'Buscando CEP...';
            statusElement.style.color = '#666';
            
            try {
                const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
                const data = await response.json();
                
                if (data.erro) {
                    statusElement.textContent = 'CEP n√£o encontrado';
                    statusElement.style.color = '#dc3545';
                    return;
                }
                
                // Preencher campos automaticamente
                document.getElementById('new-address-logradouro').value = data.logradouro || '';
                document.getElementById('new-address-bairro').value = data.bairro || '';
                document.getElementById('new-address-cidade').value = data.localidade || '';
                document.getElementById('new-address-uf').value = data.uf || '';
                
                statusElement.textContent = 'CEP v√°lido \u2713';
                statusElement.style.color = '#00a650';
                
                // Formatar CEP no campo
                document.getElementById('new-address-cep').value = cep.replace(/(\d{5})(\d{3})/, '$1-$2');
                
            } catch (error) {
                statusElement.textContent = 'Erro ao buscar CEP';
                statusElement.style.color = '#dc3545';
            }
        }
        
        function showConfirmationModal(title, message, onConfirm) {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-message').textContent = message;
            document.getElementById('confirmation-modal').style.display = 'flex';
            
            const confirmBtn = document.getElementById('modal-confirm-btn');
            confirmBtn.onclick = function() {
                onConfirm();
                closeConfirmationModal();
            };
        }
        
        function closeConfirmationModal() {
            document.getElementById('confirmation-modal').style.display = 'none';
        }
        
        // Fechar modal ao clicar fora
        document.getElementById('confirmation-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeConfirmationModal();
            }
        });
        
        document.getElementById('withdraw-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeWithdrawModal();
            }
        });
        
        function removeAddress(button) {
            const addressItem = button.closest('.address-item');
            const isPrincipal = addressItem.getAttribute('data-main') === 'true';
            
            if (isPrincipal) {
                showConfirmationModal(
                    'N√£o √© poss√≠vel remover',
                    'O endere√ßo principal n√£o pode ser removido. Defina outro endere√ßo como principal primeiro.',
                    function() {}
                );
                return;
            }
            
            showConfirmationModal(
                'Remover endere√ßo',
                'Tem certeza que deseja remover este endere√ßo?',
                function() {
                    addressItem.remove();
                    saveAddressesToStorage();
                }
            );
        }
        
        function setAsMainAddress(button) {
            showConfirmationModal(
                'Definir como principal',
                'Definir este endere√ßo como principal?',
                function() {
                    const addressesList = document.getElementById('addresses-list');
                    const newMainAddress = button.closest('.address-item');
                    
                    // Remover principal de todos os endere√ßos
                    const allAddresses = addressesList.querySelectorAll('.address-item');
                    allAddresses.forEach(address => {
                        if (address.getAttribute('data-main') === 'true') {
                            address.removeAttribute('data-main');
                            address.style.borderLeft = 'none';
                            const badge = address.querySelector('.principal-badge');
                            if (badge) badge.remove();
                            
                            // Adicionar bot√£o "Definir como principal" no antigo principal
                            const actionsDiv = address.querySelector('.address-actions');
                            if (actionsDiv && !actionsDiv.querySelector('.set-main-btn')) {
                                const setMainBtn = document.createElement('button');
                                setMainBtn.className = 'btn btn-secondary set-main-btn';
                                setMainBtn.style.cssText = 'background: #ffc107; color: #000; margin-right: 10px;';
                                setMainBtn.innerHTML = '<i class="fas fa-star"></i>';
                                setMainBtn.onclick = function() { setAsMainAddress(this); };
                                actionsDiv.insertBefore(setMainBtn, actionsDiv.firstChild);
                            }
                        }
                    });
                    
                    // Definir novo principal
                    newMainAddress.setAttribute('data-main', 'true');
                    newMainAddress.style.borderLeft = '4px solid #3483fa';
                    
                    // Adicionar badge principal
                    const titleDiv = newMainAddress.querySelector('h4').parentElement;
                    const badge = document.createElement('span');
                    badge.className = 'principal-badge';
                    badge.style.cssText = 'background: #3483fa; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: 600; margin-right: 10px;';
                    badge.textContent = 'Principal';
                    titleDiv.insertBefore(badge, titleDiv.firstChild);
                    
                    // Remover bot√£o "Definir como principal"
                    button.remove();
                    
                    saveAddressesToStorage();
                }
            );
        }
        
        function confirmDeleteAccount() {
            if (confirm('Tem certeza que deseja excluir sua conta?\n\nEsta a√ß√£o √© irrevers√≠vel e todos os seus dados ser√£o perdidos.')) {
                if (confirm('Digite "EXCLUIR" para confirmar:') === 'EXCLUIR') {
                    alert('Conta exclu√≠da com sucesso!');
                    localStorage.removeItem('loggedUser');
                    window.location.href = '/';
                } else {
                    alert('Exclus√£o cancelada.');
                }
            }
        }
        
        function initDashboardChart() {
            if (!dashboardChart) {
                const ctx = document.getElementById('dashboardSalesChart').getContext('2d');
                dashboardChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: salesData[7].labels,
                        datasets: [{
                            label: 'Vendas',
                            data: salesData[7].data,
                            borderColor: '#3483fa',
                            backgroundColor: 'rgba(52, 131, 250, 0.1)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
                
                // Configurar controles do gr√°fico do dashboard
                document.querySelectorAll('#dashboard-chart .chart-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        document.querySelectorAll('#dashboard-chart .chart-btn').forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        const period = parseInt(this.dataset.period);
                        const data = salesData[period];
                        dashboardChart.data.labels = data.labels;
                        dashboardChart.data.datasets[0].data = data.data;
                        dashboardChart.update();
                        
                        // Atualizar total de vendas e faturamento no grid
                        document.getElementById('dashboard-chart-total-sales').textContent = data.total;
                        document.getElementById('dashboard-chart-revenue').textContent = 'R$ ' + data.revenue.toLocaleString('pt-BR') + ',00';
                    });
                });
            }
        }
        
        // Fun√ß√£o para carregar dados do admin (dashboard principal)
        async function loadAdminData() {
            try {
                // Carregar estat√≠sticas b√°sicas
                const response = await fetch('/api/admin/users');
                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('admin-total-users').textContent = result.totalUsers;
                    document.getElementById('admin-total-sellers').textContent = result.sellers.length;
                    
                    // Atualizar tabela de compradores (primeiros 5)
                    const buyersTable = document.getElementById('buyers-table');
                    if (result.buyers.length > 0) {
                        buyersTable.innerHTML = result.buyers.slice(0, 5).map(buyer => `
                            <tr style="border-bottom: 1px solid #f0f0f0;">
                                <td style="padding: 12px;">${buyer.ID_USUARIO}</td>
                                <td style="padding: 12px; font-weight: 500;">${buyer.NOME_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${buyer.EMAIL_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${buyer.CELULAR_USUARIO || 'N/A'}</td>
                                <td style="padding: 12px;">
                                    <button class="btn btn-info" style="background: #3498db; color: white; padding: 4px 8px; font-size: 12px;">Ver</button>
                                </td>
                            </tr>
                        `).join('');
                    } else {
                        buyersTable.innerHTML = '<tr><td colspan="5" style="padding: 20px; text-align: center; color: #666;">Nenhum comprador encontrado</td></tr>';
                    }
                    
                    // Atualizar tabela de vendedores (primeiros 5)
                    const sellersTable = document.getElementById('sellers-table');
                    if (result.sellers.length > 0) {
                        sellersTable.innerHTML = result.sellers.slice(0, 5).map(seller => `
                            <tr style="border-bottom: 1px solid #f0f0f0;">
                                <td style="padding: 12px;">${seller.ID_USUARIO}</td>
                                <td style="padding: 12px; font-weight: 500;">${seller.NOME_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${seller.EMAIL_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${seller.DIGITO_PESSOA || 'N/A'}</td>
                                <td style="padding: 12px;">
                                    <button class="btn btn-info" style="background: #3498db; color: white; padding: 4px 8px; font-size: 12px;">Ver</button>
                                </td>
                            </tr>
                        `).join('');
                    } else {
                        sellersTable.innerHTML = '<tr><td colspan="5" style="padding: 20px; text-align: center; color: #666;">Nenhum vendedor encontrado</td></tr>';
                    }
                }
            } catch (error) {
                console.error('Erro ao carregar dados do admin:', error);
            }
        }
        

        
        // Fun√ß√£o de logout
        function logout() {
            if (confirm('Tem certeza que deseja sair da sua conta?')) {
                localStorage.removeItem('loggedUser');
                localStorage.removeItem('cart');
                window.location.href = '/';
            }
        }
        
        // Fun√ß√£o para carregar dados da se√ß√£o de gerenciar contas
        async function loadAccountsData() {
            try {
                const response = await fetch('/api/admin/users');
                const result = await response.json();
                
                if (result.success) {
                    // Atualizar estat√≠sticas
                    document.getElementById('accounts-total-buyers').textContent = result.buyers.length;
                    document.getElementById('accounts-total-sellers').textContent = result.sellers.length;
                    document.getElementById('accounts-total-users').textContent = result.totalUsers;
                    
                    // Atualizar tabela completa de compradores
                    const buyersTable = document.getElementById('accounts-buyers-table');
                    if (result.buyers.length > 0) {
                        buyersTable.innerHTML = result.buyers.map(buyer => `
                            <tr style="border-bottom: 1px solid #f0f0f0;">
                                <td style="padding: 12px; font-weight: 500;">${buyer.ID_USUARIO}</td>
                                <td style="padding: 12px; font-weight: 500;">${buyer.NOME_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${buyer.EMAIL_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${buyer.CELULAR_USUARIO || 'N/A'}</td>
                                <td style="padding: 12px; color: #666;">${buyer.CPF_CLIENTE || 'N/A'}</td>
                            </tr>
                        `).join('');
                    } else {
                        buyersTable.innerHTML = '<tr><td colspan="5" style="padding: 20px; text-align: center; color: #666;">Nenhum comprador encontrado</td></tr>';
                    }
                    
                    // Atualizar tabela completa de vendedores
                    const sellersTable = document.getElementById('accounts-sellers-table');
                    if (result.sellers.length > 0) {
                        sellersTable.innerHTML = result.sellers.map(seller => `
                            <tr style="border-bottom: 1px solid #f0f0f0;">
                                <td style="padding: 12px; font-weight: 500;">${seller.ID_USUARIO}</td>
                                <td style="padding: 12px; font-weight: 500;">${seller.NOME_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${seller.EMAIL_USUARIO}</td>
                                <td style="padding: 12px; color: #666;">${seller.CELULAR_USUARIO || 'N/A'}</td>
                                <td style="padding: 12px; color: #666;">${seller.DIGITO_PESSOA || 'N/A'}</td>
                                <td style="padding: 12px; color: #666;">${seller.NOME_LOJA || 'N/A'}</td>
                            </tr>
                        `).join('');
                    } else {
                        sellersTable.innerHTML = '<tr><td colspan="6" style="padding: 20px; text-align: center; color: #666;">Nenhum vendedor encontrado</td></tr>';
                    }
                } else {
                    console.error('Erro ao carregar dados:', result.message);
                }
            } catch (error) {
                console.error('Erro ao carregar dados das contas:', error);
                document.getElementById('accounts-buyers-table').innerHTML = '<tr><td colspan="5" style="padding: 20px; text-align: center; color: #e74c3c;">Erro ao carregar compradores</td></tr>';
                document.getElementById('accounts-sellers-table').innerHTML = '<tr><td colspan="6" style="padding: 20px; text-align: center; color: #e74c3c;">Erro ao carregar vendedores</td></tr>';
            }
        }
    </script>
</body>
</html>
